;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(tmm--history command-history lsp-rename-history minibuffer-history-search-history imenu--history-list shell-command-history eglot-command-history yes-or-no-p-history minibuffer-history buffer-name-history file-name-history extended-command-history))
(setq tmm--history '("h==>Help" "0==>Text" "O==>Org" "T==>Table" "t==>Tools" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File"))
(setq command-history '((org-todo nil) (execute-extended-command nil "org-todo") (org-agenda nil) (execute-extended-command nil "org-agenda" "org") (org-agenda nil) (execute-extended-command nil "org-agenda" "org-a") (org-todo-list nil) (execute-extended-command nil "org-todo-list" "org") (org-todo-list nil) (execute-extended-command nil "org-todo-list" "org-") (org-agenda nil) (execute-extended-command nil "org-agenda" "org-ag") (load-file "~/dotfiles/emacs/.config/emacs/init.el") (execute-extended-command nil "load-file" "loa") (find-file "~/dotfiles/emacs/.config/emacs/test.org" t) (find-file "~/dotfiles/emacs/.config/emacs/init.el" t) (org-todo-list nil) (execute-extended-command nil "org-todo-list" "org-to") (org-todo nil) (execute-extended-command nil "org-todo" "org-to") (org-todo nil) (execute-extended-command nil "org-todo" "org-mode-") (find-file "~/dotfiles/emacs/.config/emacs/test.org" t) (project-switch-project "~/dotfiles/") (execute-extended-command nil "rustic" "rustic") (project-switch-project "~/dotfiles/") (execute-extended-command nil "rustic" "rustic") (project-switch-project "~/repos/ruscik/")))
(setq lsp-rename-history '("summm"))
(setq imenu--history-list '("ListEnv" "Module" "EnvType" "Signature" "value" "Type" #("type" 0 4 (face tuareg-font-lock-governing-face fontified t)) "Module" "EnvType.t" "Type"))
(setq shell-command-history '("/bin/bash" "utop -emacs" "ocaml -nopromptcont" "utop"))
(setq eglot-command-history '("ocamllsp"))
(setq yes-or-no-p-history '("yes" "y" "yes"))
(setq minibuffer-history '("~/dotfiles/" "... (choose a dir)" "~/dotfiles/" "... (choose a dir)" "~/dotfiles/" "~/repos/l_lang/" "(EBool _)" "(EApp (_, _))" "fun" "~/repos/l_lang/" "nil" "~/repos/l_lang/" "~/dotfiles/" "~/repos/l_lang/" "~/dotfiles/" "... (choose a dir)" "~/dotfiles/" "... (choose a dir)" "~/dotfiles/"))
(setq buffer-name-history '("init.el" "*Warnings*"))
(setq file-name-history '("~/dotfiles/emacs/.config/emacs/test.org" "~/dotfiles/emacs/.config/emacs/init.el" "~/dotfiles/emacs/.config/emacs/test.org" "~/dotfiles/emacs/.config/emacs/init.el" "~/dotfiles/emacs/.config/emacs/test.org" "~/dotfiles/emacs/.config/emacs/init.el" "~/repos/ruscik/src/main.rs" "~/repos/ruscik/" "~/repos/" "~/dotfiles/emacs/.config/emacs/init.el" "~/repos/szaszki/kod.c" "~/repos/szaszki/" "~/repos/" "~/dotfiles/emacs/.config/emacs/init.el" "~/repos/l_lang/bin/main.ml" "~/dotfiles/nvim/.config/nvim/lua/plugins/nvim-cmp.lua" "~/dotfiles/emacs/.config/emacs/init.el" "~/dotfiles/emacs/.config/emacs/opam-user-setup.el" "~/dotfiles/emacs/.config/emacs/init.el" "~/repos/l_lang/bin/main.ml" "~/dotfiles/emacs/.config/emacs/init.el" "~/repos/l_lang/bin/main.ml" "~/repos/l_lang/" "~/dotfiles/bash-helpers/zell-tabs.sh" "~/dotfiles/emacs/.config/emacs/init.el" "~/dotfiles/" "~/dotfiles/emacs/.config/emacs/init.el" "/home/sileanth/dotfiles/emacs/.config/emacs/init.el" "~/dotfiles/emacs/.config/emacs/init.el" "~/dotfiles/init.el" "~/dotfiles/nvim/.config/nvim/lua/plugins/nvim-cmp.lua" "~/dotfiles/nvim/.config/nvim/lua/plugins/trouble.lua" "~/dotfiles/emacs/.config/emacs/init.el"))
(setq extended-command-history '("org-todo" "org-agenda" "org-todo-list" "org-agenda" "load-file" "org-todo-list" "org-todo" "rustic" "lsp-ui-doc-mode" "lsp-goto-implementation" "lsp-goto-type-definition" "lsp-format-buffer" "lsp-doctor" "lsp-lens-mode" "lsp-ui-imenu" "lsp-describe-session" "lsp-lens-show" "lsp-goto-implementation" "lsp-rename" "lsp-goto-implementation" "lsp" "list-buffers" "term" "utop" "load-file" "kill-sexp" "delete-region" "merlin-construct" "merlin-jump" "merlin-use" "merlin-eldoc-setup" "merlin-use" "run-ocaml" "recentf-open-files" "load-file" "eglot" "org-reload" "load-file" "recentf-open-files"))
